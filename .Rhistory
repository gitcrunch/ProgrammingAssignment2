dir
dir()
pwd
pwd()
install.package("swril")
load("C:/Users/ycheng/R/.RData")
mean(dat$sulfate, na.rm=TRUE)
pollutantmean <- function(directory, pollutant="sulfate", id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
files_list <- list.files(directory, full.names=TRUE)
dat <- data.frame();
for (i in id){
dat <- rbind(dat, read.csv(files_list[i]))
}
pollutant_vect <- dat$pollutant
mean(dat$pollutant, na.rm=TRUE)
}
pollutantmean(directory=specdata)
pollutantmean(directory="specdata"")
pollutantmean <- function(directory, pollutant="sulfate", id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
files_list <- list.files(directory, full.names=TRUE)
dat <- data.frame();
for (i in id){
dat <- rbind(dat, read.csv(files_list[i]))
}
pollutant_vect <- dat$pollutant
mean(dat$pollutant, na.rm=TRUE)
}
pollutantmean(directory="specdata")
setwd("C:\\Users\\ycheng\\git\\ProgrammingAssignment2")
source("cachematrix.R")
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
amatrix$getinv()
cacheSolve(amatrix)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y){
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(inverse) inv <<- inverse
getinv <- function() inv
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv()
if(!is.null(inv)){
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
inv
}
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
amatrix$getinv()
cacheSolve(amatrix)
amatrix$set(matrix(c(0, 5, 99, 66), nrow=2, ncol=2))
cacheSolve(amatrix)
amatrix$get()
amatrix$getinv()
